import yaml
import os
import pandas as pd
from snakemake.utils import min_version

min_version("6.0")
shell.prefix("set -euo pipefail; ")


with open(config["align_asm_to_ref"]["config"], "r") as file:
    config["align_asm_to_ref"]["config"] = yaml.safe_load(file)


include: "rules/common.smk"


# Globals shared throughout workflow.
SAMPLES_DF = load_samples_df()
REF_NAME = config["align_asm_to_ref"]["ref_key"]
SAMPLE_NAMES = SAMPLES_DF.index
ORIENTATION = ("fwd", "rev")
CHROMOSOMES = (
    "chr1",
    "chr2",
    "chr3",
    "chr4",
    "chr5",
    "chr6",
    "chr7",
    "chr8",
    "chr9",
    "chr10",
    "chr11",
    "chr12",
    "chr13",
    "chr14",
    "chr15",
    "chr16",
    "chr17",
    "chr18",
    "chr19",
    "chr20",
    "chr21",
    "chr22",
    "chrX",
    "chrY",
)


wildcard_constraints:
    chr="|".join(CHROMOSOMES),
    ort="|".join(ORIENTATION),
    sm="|".join(SAMPLE_NAMES),


include: "rules/concat_asm.smk"
include: "rules/align_asm_to_ref.smk"
include: "rules/mask_hor_arrays.smk"
include: "rules/ident_cen_ctgs.smk"
include: "rules/dna_brnn.smk"
include: "rules/extract_new_cens_ctgs.smk"
include: "rules/check_reg_nucfreq.smk"
include: "rules/repeatmasker.smk"


rule all:
    input:
        rules.mask_hor_arrays_all.input,
        # Alignment
        rules.concat_asm_all.input,
        rules.align_asm_ref_all.input,
        rules.ident_cen_ctgs_all.input,
        rules.dna_brnn_all.input,
        rules.new_cens_rename_ctg_all.input,


rule repeatmasker_all:
    input:
        expand(rules.run_repeatmasker.output, sm=SAMPLE_NAMES),
        rules.run_repeatmasker_ref.output,
        rules.format_repeatmasker_output.output,
        rules.format_add_control_repeatmasker_output.output,


rule nuc_freq_all:
    input:
        expand(rules.make_bed_files_for_plot.output, sm=SAMPLE_NAMES),
        expand(rules.convert_hifi_reads_to_fq.output, sm=SAMPLE_NAMES),
        expand(rules.align_reads_to_asm.output, sm=SAMPLE_NAMES),
        expand(rules.gen_nucfreq_plot.output, sm=SAMPLE_NAMES),
